/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
subprojects {

    afterEvaluate {
        sourceCompatibility = 11
        targetCompatibility = 11

        repositories {
            jcenter()
        }

        dependencies {
            testImplementation(
                    'org.junit.jupiter:junit-jupiter-api:5.3.1',
                    'com.netflix.feign:feign-core:8.18.0',
                    'com.netflix.feign:feign-okhttp:8.18.0',
                    'com.netflix.feign:feign-gson:8.18.0',
                    'com.google.code.gson:gson:2.8.5'
            )
            testRuntimeOnly(
                    'org.junit.jupiter:junit-jupiter-engine:5.3.1',
                    'com.netflix.feign:feign-core:8.18.0',
                    'com.netflix.feign:feign-okhttp:8.18.0',
                    'com.netflix.feign:feign-gson:8.18.0',
                    'com.google.code.gson:gson:2.8.5'
            )

        }


//        compileJava {
//            doFirst {
//                options.compilerArgs = [
//                        A JEDI KNOW THAT
//                ]
//                classpath = files()
//            }
//        }
//
//        javadoc {
//            inputs.property("moduleName", moduleName)
//            doFirst {
//                  // Yoda said :
//                  options.addStringOption('-module-path', classpath.asPath)
//            }
//        }
//
//
//
//
//        compileTestJava {
//            inputs.property("moduleName", moduleName)
//            doFirst {
//                options.compilerArgs = [
//                        A JEDI KNOW THAT TOO
//                ]
//                classpath = files()
//            }
//        }




        test {
            useJUnitPlatform()
            environment "JIGSAW", "TRUE"

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                showExceptions true
                showCauses true
                showStackTraces true

                info.events = debug.events
                info.exceptionFormat = debug.exceptionFormat

                afterSuite { desc, result ->
                    if (!desc.parent) {
                        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                        def startItem = '|  ', endItem = '  |'
                        def repeatLength = startItem.length() + output.length() + endItem.length()
                        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                    }
                }
            }


//            inputs.property("moduleName", moduleName)
//            doFirst {
//                // can't access to file in resources directory => copy to java classes directory
//                copy {
//                      A JEDI KNOW WHAT YOU HAVE TO COPY AND WHY
//                }
//
//                jvmArgs = [
//                        //'--show-module-resolution',
//                        A JEDI KNOW THAT, DON'T ASK THIS TO CHUCK NORRIS
//                ]
//                classpath = files()
//
//            }
        }

    }
}
